// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package testinglion

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - One
//  - Two
//  - StringField
//  - Int32Field
//  - Bar
type TFoo struct {
	One         *string `thrift:"one,1" json:"one,omitempty"`
	Two         *int32  `thrift:"two,2" json:"two,omitempty"`
	StringField *string `thrift:"string_field,3" json:"string_field,omitempty"`
	Int32Field  *int32  `thrift:"int32_field,4" json:"int32_field,omitempty"`
	Bar         *TBar   `thrift:"bar,5" json:"bar,omitempty"`
}

func NewTFoo() *TFoo {
	return &TFoo{}
}

var TFoo_One_DEFAULT string

func (p *TFoo) GetOne() string {
	if !p.IsSetOne() {
		return TFoo_One_DEFAULT
	}
	return *p.One
}

var TFoo_Two_DEFAULT int32

func (p *TFoo) GetTwo() int32 {
	if !p.IsSetTwo() {
		return TFoo_Two_DEFAULT
	}
	return *p.Two
}

var TFoo_StringField_DEFAULT string

func (p *TFoo) GetStringField() string {
	if !p.IsSetStringField() {
		return TFoo_StringField_DEFAULT
	}
	return *p.StringField
}

var TFoo_Int32Field_DEFAULT int32

func (p *TFoo) GetInt32Field() int32 {
	if !p.IsSetInt32Field() {
		return TFoo_Int32Field_DEFAULT
	}
	return *p.Int32Field
}

var TFoo_Bar_DEFAULT TBar

func (p *TFoo) GetBar() TBar {
	if !p.IsSetBar() {
		return TFoo_Bar_DEFAULT
	}
	return *p.Bar
}
func (p *TFoo) IsSetOne() bool {
	return p.One != nil
}

func (p *TFoo) IsSetTwo() bool {
	return p.Two != nil
}

func (p *TFoo) IsSetStringField() bool {
	return p.StringField != nil
}

func (p *TFoo) IsSetInt32Field() bool {
	return p.Int32Field != nil
}

func (p *TFoo) IsSetBar() bool {
	return p.Bar != nil
}

func (p *TFoo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TFoo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.One = &v
	}
	return nil
}

func (p *TFoo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Two = &v
	}
	return nil
}

func (p *TFoo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StringField = &v
	}
	return nil
}

func (p *TFoo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Int32Field = &v
	}
	return nil
}

func (p *TFoo) readField5(iprot thrift.TProtocol) error {
	p.Bar = &TBar{}
	if err := p.Bar.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Bar), err)
	}
	return nil
}

func (p *TFoo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TFoo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TFoo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOne() {
		if err := oprot.WriteFieldBegin("one", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:one: ", p), err)
		}
		if err := oprot.WriteString(string(*p.One)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.one (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:one: ", p), err)
		}
	}
	return err
}

func (p *TFoo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTwo() {
		if err := oprot.WriteFieldBegin("two", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:two: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Two)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.two (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:two: ", p), err)
		}
	}
	return err
}

func (p *TFoo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringField() {
		if err := oprot.WriteFieldBegin("string_field", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:string_field: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringField)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.string_field (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:string_field: ", p), err)
		}
	}
	return err
}

func (p *TFoo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt32Field() {
		if err := oprot.WriteFieldBegin("int32_field", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:int32_field: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Int32Field)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.int32_field (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:int32_field: ", p), err)
		}
	}
	return err
}

func (p *TFoo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBar() {
		if err := oprot.WriteFieldBegin("bar", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bar: ", p), err)
		}
		if err := p.Bar.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Bar), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bar: ", p), err)
		}
	}
	return err
}

func (p *TFoo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TFoo(%+v)", *p)
}

// Attributes:
//  - One
//  - Two
//  - StringField
//  - Int32Field
type TBar struct {
	One         *string `thrift:"one,1" json:"one,omitempty"`
	Two         *string `thrift:"two,2" json:"two,omitempty"`
	StringField *string `thrift:"string_field,3" json:"string_field,omitempty"`
	Int32Field  *int32  `thrift:"int32_field,4" json:"int32_field,omitempty"`
}

func NewTBar() *TBar {
	return &TBar{}
}

var TBar_One_DEFAULT string

func (p *TBar) GetOne() string {
	if !p.IsSetOne() {
		return TBar_One_DEFAULT
	}
	return *p.One
}

var TBar_Two_DEFAULT string

func (p *TBar) GetTwo() string {
	if !p.IsSetTwo() {
		return TBar_Two_DEFAULT
	}
	return *p.Two
}

var TBar_StringField_DEFAULT string

func (p *TBar) GetStringField() string {
	if !p.IsSetStringField() {
		return TBar_StringField_DEFAULT
	}
	return *p.StringField
}

var TBar_Int32Field_DEFAULT int32

func (p *TBar) GetInt32Field() int32 {
	if !p.IsSetInt32Field() {
		return TBar_Int32Field_DEFAULT
	}
	return *p.Int32Field
}
func (p *TBar) IsSetOne() bool {
	return p.One != nil
}

func (p *TBar) IsSetTwo() bool {
	return p.Two != nil
}

func (p *TBar) IsSetStringField() bool {
	return p.StringField != nil
}

func (p *TBar) IsSetInt32Field() bool {
	return p.Int32Field != nil
}

func (p *TBar) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBar) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.One = &v
	}
	return nil
}

func (p *TBar) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Two = &v
	}
	return nil
}

func (p *TBar) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StringField = &v
	}
	return nil
}

func (p *TBar) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Int32Field = &v
	}
	return nil
}

func (p *TBar) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TBar"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBar) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOne() {
		if err := oprot.WriteFieldBegin("one", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:one: ", p), err)
		}
		if err := oprot.WriteString(string(*p.One)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.one (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:one: ", p), err)
		}
	}
	return err
}

func (p *TBar) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTwo() {
		if err := oprot.WriteFieldBegin("two", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:two: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Two)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.two (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:two: ", p), err)
		}
	}
	return err
}

func (p *TBar) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringField() {
		if err := oprot.WriteFieldBegin("string_field", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:string_field: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringField)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.string_field (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:string_field: ", p), err)
		}
	}
	return err
}

func (p *TBar) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt32Field() {
		if err := oprot.WriteFieldBegin("int32_field", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:int32_field: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Int32Field)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.int32_field (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:int32_field: ", p), err)
		}
	}
	return err
}

func (p *TBar) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBar(%+v)", *p)
}

// Attributes:
//  - StringField
//  - Int32Field
type TBan struct {
	StringField *string `thrift:"string_field,1" json:"string_field,omitempty"`
	Int32Field  *int32  `thrift:"int32_field,2" json:"int32_field,omitempty"`
}

func NewTBan() *TBan {
	return &TBan{}
}

var TBan_StringField_DEFAULT string

func (p *TBan) GetStringField() string {
	if !p.IsSetStringField() {
		return TBan_StringField_DEFAULT
	}
	return *p.StringField
}

var TBan_Int32Field_DEFAULT int32

func (p *TBan) GetInt32Field() int32 {
	if !p.IsSetInt32Field() {
		return TBan_Int32Field_DEFAULT
	}
	return *p.Int32Field
}
func (p *TBan) IsSetStringField() bool {
	return p.StringField != nil
}

func (p *TBan) IsSetInt32Field() bool {
	return p.Int32Field != nil
}

func (p *TBan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBan) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StringField = &v
	}
	return nil
}

func (p *TBan) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Int32Field = &v
	}
	return nil
}

func (p *TBan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TBan"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBan) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringField() {
		if err := oprot.WriteFieldBegin("string_field", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:string_field: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringField)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.string_field (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:string_field: ", p), err)
		}
	}
	return err
}

func (p *TBan) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt32Field() {
		if err := oprot.WriteFieldBegin("int32_field", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:int32_field: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Int32Field)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.int32_field (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:int32_field: ", p), err)
		}
	}
	return err
}

func (p *TBan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBan(%+v)", *p)
}

// Attributes:
//  - Ban
type TBat struct {
	Ban *TBan `thrift:"ban,1" json:"ban,omitempty"`
}

func NewTBat() *TBat {
	return &TBat{}
}

var TBat_Ban_DEFAULT *TBan

func (p *TBat) GetBan() *TBan {
	if !p.IsSetBan() {
		return TBat_Ban_DEFAULT
	}
	return p.Ban
}
func (p *TBat) IsSetBan() bool {
	return p.Ban != nil
}

func (p *TBat) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBat) readField1(iprot thrift.TProtocol) error {
	p.Ban = &TBan{}
	if err := p.Ban.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ban), err)
	}
	return nil
}

func (p *TBat) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TBat"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBat) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBan() {
		if err := oprot.WriteFieldBegin("ban", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ban: ", p), err)
		}
		if err := p.Ban.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ban), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ban: ", p), err)
		}
	}
	return err
}

func (p *TBat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBat(%+v)", *p)
}

// Attributes:
//  - Bat
type TBaz struct {
	Bat *TBat `thrift:"bat,1" json:"bat,omitempty"`
}

func NewTBaz() *TBaz {
	return &TBaz{}
}

var TBaz_Bat_DEFAULT *TBat

func (p *TBaz) GetBat() *TBat {
	if !p.IsSetBat() {
		return TBaz_Bat_DEFAULT
	}
	return p.Bat
}
func (p *TBaz) IsSetBat() bool {
	return p.Bat != nil
}

func (p *TBaz) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TBaz) readField1(iprot thrift.TProtocol) error {
	p.Bat = &TBat{}
	if err := p.Bat.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Bat), err)
	}
	return nil
}

func (p *TBaz) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TBaz"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TBaz) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBat() {
		if err := oprot.WriteFieldBegin("bat", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bat: ", p), err)
		}
		if err := p.Bat.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Bat), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bat: ", p), err)
		}
	}
	return err
}

func (p *TBaz) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TBaz(%+v)", *p)
}

type TEmpty struct {
}

func NewTEmpty() *TEmpty {
	return &TEmpty{}
}

func (p *TEmpty) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TEmpty) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TEmpty"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TEmpty) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TEmpty(%+v)", *p)
}

// Attributes:
//  - One
type TNoStdJson struct {
	One map[int64]string `thrift:"one,1" json:"one,omitempty"`
}

func NewTNoStdJson() *TNoStdJson {
	return &TNoStdJson{}
}

var TNoStdJson_One_DEFAULT map[int64]string

func (p *TNoStdJson) GetOne() map[int64]string {
	return p.One
}
func (p *TNoStdJson) IsSetOne() bool {
	return p.One != nil
}

func (p *TNoStdJson) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TNoStdJson) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int64]string, size)
	p.One = tMap
	for i := 0; i < size; i++ {
		var _key0 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.One[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TNoStdJson) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TNoStdJson"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TNoStdJson) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOne() {
		if err := oprot.WriteFieldBegin("one", thrift.MAP, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:one: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRING, len(p.One)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.One {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:one: ", p), err)
		}
	}
	return err
}

func (p *TNoStdJson) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TNoStdJson(%+v)", *p)
}
