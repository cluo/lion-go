// Code generated by protoc-gen-go.
// source: proto/testing/testing.proto
// DO NOT EDIT!

package protoliontesting

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Foo struct {
	One         string `protobuf:"bytes,1,opt,name=one" json:"one,omitempty"`
	Two         int32  `protobuf:"varint,2,opt,name=two" json:"two,omitempty"`
	StringField string `protobuf:"bytes,3,opt,name=string_field" json:"string_field,omitempty"`
	Int32Field  int32  `protobuf:"varint,4,opt,name=int32_field" json:"int32_field,omitempty"`
	Bar         *Bar   `protobuf:"bytes,5,opt,name=bar" json:"bar,omitempty"`
}

func (m *Foo) Reset()                    { *m = Foo{} }
func (m *Foo) String() string            { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()               {}
func (*Foo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Foo) GetBar() *Bar {
	if m != nil {
		return m.Bar
	}
	return nil
}

type Bar struct {
	One         string `protobuf:"bytes,1,opt,name=one" json:"one,omitempty"`
	Two         string `protobuf:"bytes,2,opt,name=two" json:"two,omitempty"`
	StringField string `protobuf:"bytes,3,opt,name=string_field" json:"string_field,omitempty"`
	Int32Field  int32  `protobuf:"varint,4,opt,name=int32_field" json:"int32_field,omitempty"`
}

func (m *Bar) Reset()                    { *m = Bar{} }
func (m *Bar) String() string            { return proto.CompactTextString(m) }
func (*Bar) ProtoMessage()               {}
func (*Bar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Baz struct {
	Bat *Baz_Bat `protobuf:"bytes,1,opt,name=bat" json:"bat,omitempty"`
}

func (m *Baz) Reset()                    { *m = Baz{} }
func (m *Baz) String() string            { return proto.CompactTextString(m) }
func (*Baz) ProtoMessage()               {}
func (*Baz) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Baz) GetBat() *Baz_Bat {
	if m != nil {
		return m.Bat
	}
	return nil
}

type Baz_Bat struct {
	Ban *Baz_Bat_Ban `protobuf:"bytes,1,opt,name=ban" json:"ban,omitempty"`
}

func (m *Baz_Bat) Reset()                    { *m = Baz_Bat{} }
func (m *Baz_Bat) String() string            { return proto.CompactTextString(m) }
func (*Baz_Bat) ProtoMessage()               {}
func (*Baz_Bat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Baz_Bat) GetBan() *Baz_Bat_Ban {
	if m != nil {
		return m.Ban
	}
	return nil
}

type Baz_Bat_Ban struct {
	StringField string `protobuf:"bytes,1,opt,name=string_field" json:"string_field,omitempty"`
	Int32Field  int32  `protobuf:"varint,2,opt,name=int32_field" json:"int32_field,omitempty"`
}

func (m *Baz_Bat_Ban) Reset()                    { *m = Baz_Bat_Ban{} }
func (m *Baz_Bat_Ban) String() string            { return proto.CompactTextString(m) }
func (*Baz_Bat_Ban) ProtoMessage()               {}
func (*Baz_Bat_Ban) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type NoStdJson struct {
	One map[uint64]string `protobuf:"bytes,1,rep,name=one" json:"one,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NoStdJson) Reset()                    { *m = NoStdJson{} }
func (m *NoStdJson) String() string            { return proto.CompactTextString(m) }
func (*NoStdJson) ProtoMessage()               {}
func (*NoStdJson) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NoStdJson) GetOne() map[uint64]string {
	if m != nil {
		return m.One
	}
	return nil
}

func init() {
	proto.RegisterType((*Foo)(nil), "lion.proto.testing.Foo")
	proto.RegisterType((*Bar)(nil), "lion.proto.testing.Bar")
	proto.RegisterType((*Baz)(nil), "lion.proto.testing.Baz")
	proto.RegisterType((*Baz_Bat)(nil), "lion.proto.testing.Baz.Bat")
	proto.RegisterType((*Baz_Bat_Ban)(nil), "lion.proto.testing.Baz.Bat.Ban")
	proto.RegisterType((*Empty)(nil), "lion.proto.testing.Empty")
	proto.RegisterType((*NoStdJson)(nil), "lion.proto.testing.NoStdJson")
}

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xe9, 0xb2, 0xaa, 0x7b, 0x55, 0x90, 0x28, 0x58, 0xba, 0x83, 0x12, 0x44, 0x86, 0x48,
	0x94, 0xf6, 0x22, 0x1e, 0x07, 0xf3, 0xb0, 0x83, 0x1e, 0xbc, 0x79, 0x91, 0x8e, 0x45, 0x29, 0xd6,
	0x97, 0x92, 0x3e, 0x95, 0xee, 0x0f, 0xf1, 0xef, 0x35, 0xc9, 0x5a, 0x2f, 0xab, 0x82, 0x87, 0x90,
	0xbc, 0xd7, 0xef, 0xfb, 0x7e, 0xaf, 0x0f, 0xc6, 0x95, 0xd1, 0xa4, 0x2f, 0x49, 0xd5, 0x54, 0xe0,
	0x4b, 0x77, 0x4b, 0xdf, 0xe5, 0xbc, 0x2c, 0x34, 0xae, 0xdf, 0xb2, 0xfd, 0x22, 0x2a, 0x60, 0xb7,
	0x5a, 0xf3, 0x08, 0x98, 0x46, 0x15, 0x07, 0x27, 0xc1, 0x64, 0xe4, 0x0a, 0xfa, 0xd4, 0xf1, 0xc0,
	0x16, 0x21, 0x3f, 0x84, 0xdd, 0x9a, 0x8c, 0x95, 0x3e, 0x3d, 0x17, 0xaa, 0x5c, 0xc6, 0xcc, 0x4b,
	0x0e, 0x20, 0x2a, 0x90, 0xb2, 0xb4, 0x6d, 0x0e, 0xbd, 0xf4, 0x14, 0xd8, 0x22, 0x37, 0x71, 0x68,
	0x8b, 0x28, 0x3d, 0x92, 0x9b, 0x34, 0x39, 0xcd, 0x8d, 0x98, 0x03, 0xb3, 0xd7, 0xaf, 0xc4, 0xd1,
	0x3f, 0x88, 0xe2, 0x2b, 0x70, 0x61, 0x2b, 0x3e, 0x71, 0x64, 0xf2, 0x61, 0x51, 0x3a, 0xee, 0x27,
	0xaf, 0xec, 0xa1, 0x44, 0x39, 0x03, 0xf1, 0x0b, 0x67, 0xc0, 0xd6, 0x70, 0xfc, 0x87, 0xc1, 0x1e,
	0x4c, 0xae, 0x9c, 0x09, 0x37, 0x06, 0x0b, 0xfa, 0x06, 0xf3, 0x5b, 0x13, 0xdb, 0x10, 0xce, 0xde,
	0x2a, 0x6a, 0x44, 0x09, 0xa3, 0x3b, 0xfd, 0x40, 0xcb, 0x79, 0xad, 0x91, 0x67, 0xdd, 0x3f, 0x33,
	0x4b, 0x3d, 0xeb, 0xa3, 0xfe, 0x68, 0xe5, 0x3d, 0xaa, 0x19, 0x92, 0x69, 0x92, 0x73, 0xd8, 0xe9,
	0xde, 0x6e, 0x4f, 0xaf, 0xaa, 0xf1, 0xe0, 0x21, 0xdf, 0x83, 0xf0, 0x23, 0x2f, 0xdf, 0xd5, 0x7a,
	0x6d, 0x37, 0x83, 0xeb, 0x60, 0xca, 0x1f, 0xf7, 0x7d, 0x9e, 0x4b, 0x6e, 0x23, 0x17, 0x5b, 0xbe,
	0x93, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x4a, 0x11, 0xba, 0x1b, 0x02, 0x00, 0x00,
}
