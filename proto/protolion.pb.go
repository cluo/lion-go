// Code generated by protoc-gen-go.
// source: proto/protolion.proto
// DO NOT EDIT!

package protolion

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/pb/go/google/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Level is a logging level.
type Level int32

const (
	// is valid
	Level_LEVEL_NONE  Level = 0
	Level_LEVEL_DEBUG Level = 1
	Level_LEVEL_INFO  Level = 2
	Level_LEVEL_WARN  Level = 3
	Level_LEVEL_ERROR Level = 4
	Level_LEVEL_FATAL Level = 5
	Level_LEVEL_PANIC Level = 6
)

var Level_name = map[int32]string{
	0: "LEVEL_NONE",
	1: "LEVEL_DEBUG",
	2: "LEVEL_INFO",
	3: "LEVEL_WARN",
	4: "LEVEL_ERROR",
	5: "LEVEL_FATAL",
	6: "LEVEL_PANIC",
}
var Level_value = map[string]int32{
	"LEVEL_NONE":  0,
	"LEVEL_DEBUG": 1,
	"LEVEL_INFO":  2,
	"LEVEL_WARN":  3,
	"LEVEL_ERROR": 4,
	"LEVEL_FATAL": 5,
	"LEVEL_PANIC": 6,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}
func (Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Entry is the object serialized for logging.
type Entry struct {
	// id may not be set depending on logger options
	// it is up to the user to determine if id is required
	Id        string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Level     Level                      `protobuf:"varint,2,opt,name=level,enum=lion.Level" json:"level,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// both context and fields may be set
	Context []*Entry_Message  `protobuf:"bytes,4,rep,name=context" json:"context,omitempty"`
	Fields  map[string]string `protobuf:"bytes,5,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// one of event, message, writer_output will be set
	Event        *Entry_Message `protobuf:"bytes,6,opt,name=event" json:"event,omitempty"`
	Message      string         `protobuf:"bytes,7,opt,name=message" json:"message,omitempty"`
	WriterOutput []byte         `protobuf:"bytes,8,opt,name=writer_output,proto3" json:"writer_output,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Entry) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Entry) GetContext() []*Entry_Message {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Entry) GetFields() map[string]string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Entry) GetEvent() *Entry_Message {
	if m != nil {
		return m.Event
	}
	return nil
}

// Message represents a serialized protobuf message.
// The name is the name registered with lion.
type Entry_Message struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Entry_Message) Reset()                    { *m = Entry_Message{} }
func (m *Entry_Message) String() string            { return proto.CompactTextString(m) }
func (*Entry_Message) ProtoMessage()               {}
func (*Entry_Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func init() {
	proto.RegisterType((*Entry)(nil), "lion.Entry")
	proto.RegisterType((*Entry_Message)(nil), "lion.Entry.Message")
	proto.RegisterEnum("lion.Level", Level_name, Level_value)
}

var fileDescriptor0 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x4f, 0x4f, 0xfa, 0x40,
	0x10, 0xfd, 0xf5, 0xff, 0xaf, 0x53, 0xc0, 0xa6, 0x86, 0xb8, 0xe9, 0x45, 0x42, 0x8c, 0x1a, 0x13,
	0x4a, 0x82, 0x17, 0xe3, 0xad, 0x68, 0x31, 0x24, 0xb5, 0x98, 0x06, 0x35, 0xf1, 0x42, 0x8a, 0x2c,
	0xa4, 0xb1, 0x7f, 0x48, 0xbb, 0x45, 0x89, 0x5f, 0xd2, 0x8f, 0x64, 0xd9, 0x15, 0xca, 0x81, 0x4b,
	0x33, 0xf3, 0xe6, 0xcd, 0x7b, 0x6f, 0x9a, 0x85, 0xe6, 0x32, 0x4b, 0x49, 0xda, 0xa5, 0xdf, 0x28,
	0x4c, 0x13, 0x8b, 0x56, 0x86, 0xb8, 0xa9, 0xcd, 0xd3, 0x45, 0x9a, 0x2e, 0x22, 0xcc, 0xa6, 0xd3,
	0x62, 0xde, 0x25, 0x61, 0x8c, 0x73, 0x12, 0xc4, 0x4b, 0x46, 0x6b, 0xff, 0xf0, 0x20, 0x39, 0x09,
	0xc9, 0xd6, 0x06, 0x00, 0x1f, 0xce, 0x10, 0xd7, 0xe2, 0x2e, 0x55, 0xc3, 0x04, 0x29, 0xc2, 0x2b,
	0x1c, 0x21, 0xbe, 0x6c, 0x1b, 0x3d, 0xcd, 0xa2, 0xc2, 0xee, 0x06, 0x32, 0x3a, 0xa0, 0xee, 0x44,
	0x90, 0x50, 0xce, 0xb5, 0x9e, 0x69, 0x31, 0x1b, 0x6b, 0x6b, 0x63, 0x8d, 0xb7, 0x0c, 0xe3, 0x0c,
	0x94, 0xf7, 0x34, 0x21, 0xf8, 0x8b, 0x20, 0xb1, 0x25, 0x94, 0xe4, 0x63, 0x26, 0x46, 0x4d, 0xad,
	0x47, 0x9c, 0xe7, 0xc1, 0x02, 0x1b, 0x17, 0x20, 0xcf, 0x43, 0x1c, 0xcd, 0x72, 0x24, 0x51, 0xd2,
	0xc9, 0x3e, 0x69, 0x40, 0x27, 0x2c, 0x65, 0x1b, 0xa4, 0x32, 0x45, 0x42, 0x90, 0x4c, 0x9d, 0x0f,
	0x8a, 0x1d, 0x81, 0x12, 0xb3, 0x12, 0x29, 0xf4, 0x9c, 0x26, 0xd4, 0x3f, 0xb3, 0x90, 0xe0, 0x6c,
	0x92, 0x16, 0x64, 0x59, 0x10, 0xf4, 0xbf, 0x84, 0x6b, 0xe6, 0x39, 0x28, 0xdb, 0x95, 0x1a, 0x88,
	0x49, 0x10, 0xe3, 0xbf, 0xf3, 0xeb, 0x20, 0xad, 0x82, 0xa8, 0xc0, 0xf4, 0xfc, 0x9a, 0xd9, 0x01,
	0x6d, 0x3f, 0x82, 0x06, 0xc2, 0x07, 0x5e, 0x1f, 0xa2, 0xaa, 0xb7, 0xfc, 0x0d, 0x77, 0xf5, 0x0d,
	0x12, 0xfb, 0x53, 0x0d, 0x00, 0xd7, 0x79, 0x71, 0xdc, 0x89, 0x37, 0xf2, 0x1c, 0xfd, 0x5f, 0x99,
	0x4b, 0x63, 0xfd, 0xbd, 0xd3, 0x7f, 0x7e, 0xd0, 0xb9, 0x8a, 0x30, 0xf4, 0x06, 0x23, 0x9d, 0xaf,
	0xfa, 0x57, 0xdb, 0xf7, 0x74, 0xa1, 0x5a, 0x70, 0x7c, 0x7f, 0xe4, 0xeb, 0x62, 0x05, 0x0c, 0xec,
	0xb1, 0xed, 0xea, 0x52, 0x05, 0x3c, 0xd9, 0xde, 0xf0, 0x4e, 0x97, 0xfb, 0xda, 0x9b, 0xba, 0x7b,
	0x09, 0x53, 0x99, 0x96, 0xd7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x66, 0x5e, 0x3e, 0x28, 0x23,
	0x02, 0x00, 0x00,
}
